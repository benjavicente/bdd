{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducci\u00f3n BDDUC es la Base de Datos Unificada y Comunitaria de la comunidad Open Source eUC. Permite crear aplicaciones utilizando una API Rest o GraphQL para no tener que preocuparse de una base de datos propia y la obtenci\u00f3n de datos manual con scrappers de las distintos p\u00e1ginas de la Universidad (en GitHub hay como 30 scrappers para BuscaCursos !). Este proyecto esta en desarrollo, y cualquier aporte o sugerencia es aceptada! Si tienes una duda o sugerencia puedes hacerla en el foro del repositorio , y si encuentras un problema o quieres realizar un aporte en el c\u00f3digo o documentaci\u00f3n, puedes crear una issue al respecto .","title":"Introducci\u00f3n"},{"location":"#introduccion","text":"BDDUC es la Base de Datos Unificada y Comunitaria de la comunidad Open Source eUC. Permite crear aplicaciones utilizando una API Rest o GraphQL para no tener que preocuparse de una base de datos propia y la obtenci\u00f3n de datos manual con scrappers de las distintos p\u00e1ginas de la Universidad (en GitHub hay como 30 scrappers para BuscaCursos !). Este proyecto esta en desarrollo, y cualquier aporte o sugerencia es aceptada! Si tienes una duda o sugerencia puedes hacerla en el foro del repositorio , y si encuentras un problema o quieres realizar un aporte en el c\u00f3digo o documentaci\u00f3n, puedes crear una issue al respecto .","title":"Introducci\u00f3n"},{"location":"api/","text":"API Por ahora no hay documentaci\u00f3n aqu\u00ed \ud83d\ude2a En el servidor se puede ver la documentaci\u00f3n auto-generada en /docs .","title":"API"},{"location":"api/#api","text":"Por ahora no hay documentaci\u00f3n aqu\u00ed \ud83d\ude2a En el servidor se puede ver la documentaci\u00f3n auto-generada en /docs .","title":"API"},{"location":"contribute/","text":"Como contribuir Nota Esta documentaci\u00f3n est\u00e1 en desarrollo! Pronto se a\u00f1adir\u00e1 informaci\u00f3n de como configurar el entorno de desarrollo, como trabajar con la base de datos con SQLModel, como hacer endpoints con FastAPI, como a\u00f1adir tipos y resolvers en StrawberryGraphQL, y m\u00e1s.","title":"Como contribuir"},{"location":"contribute/#como-contribuir","text":"Nota Esta documentaci\u00f3n est\u00e1 en desarrollo! Pronto se a\u00f1adir\u00e1 informaci\u00f3n de como configurar el entorno de desarrollo, como trabajar con la base de datos con SQLModel, como hacer endpoints con FastAPI, como a\u00f1adir tipos y resolvers en StrawberryGraphQL, y m\u00e1s.","title":"Como contribuir"},{"location":"contribute/docs/","text":"Documentaci\u00f3n Aportar en la documentaci\u00f3n no requiere la instalaci\u00f3n de ning\u00fan software, se puede hacer directamente en GitHub (a la derecha de cada titulo hay un para ir a editar), aunque descargar el repositorio e instalar mkdocs-material con el plugin mkdocs-git-revision-date-localized-plugin es recomendado para visualizar como queda la documentaci\u00f3n. Para a\u00f1adir una entrada a la documentaci\u00f3n se tiene que crear un archivo dentro del directorio /docs (y dentro de otro sub-directorio si corresponde) y luego a\u00f1adir esa entrada donde corresponde en la secci\u00f3n de nav de mkdocs.yml .","title":"Documentaci\u00f3n"},{"location":"contribute/docs/#documentacion","text":"Aportar en la documentaci\u00f3n no requiere la instalaci\u00f3n de ning\u00fan software, se puede hacer directamente en GitHub (a la derecha de cada titulo hay un para ir a editar), aunque descargar el repositorio e instalar mkdocs-material con el plugin mkdocs-git-revision-date-localized-plugin es recomendado para visualizar como queda la documentaci\u00f3n. Para a\u00f1adir una entrada a la documentaci\u00f3n se tiene que crear un archivo dentro del directorio /docs (y dentro de otro sub-directorio si corresponde) y luego a\u00f1adir esa entrada donde corresponde en la secci\u00f3n de nav de mkdocs.yml .","title":"Documentaci\u00f3n"},{"location":"contribute/orm/","text":"Modelos En ese proyecto se utiliza SQLModel para la definici\u00f3n de modelos (tablas) y las consultas de la base de datos. Es un wrapper de SQLAlchemy , un ORM popular de python. SQLModel combina la simplicidad de @dataclass con el poder de SQLAlchemy: SQLModel from datetime import datetime from typing import Optional from sqlmodel import SQLModel , Field , Relationship class Wizard ( SQLModel , table = True ): # type: ignore # noqa id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str level : int = 0 created_at : datetime = Field ( default_factory = datetime . now ) wizard = Wizard ( name = \"\ud83e\uddd9\u200d\" ) Data Classes from datetime import datetime from typing import Optional from dataclasses import dataclass , field @dataclass class Wizard : name : str # Fields without a default value must appear fist id : Optional [ int ] = None level : int = 0 created_at : datetime = field ( default_factory = datetime . now ) wizard = Wizard ( name = \"\ud83e\uddd9\u200d\u2642\ufe0f\" ) Importante SQLModel fue lanzada el 24 de Agosto del 2021, y todavia no alcanza una versi\u00f3n estable, por lo que la API puede cambiar drasticamente y hay m\u00e9todos que no tienen anotaci\u00f3n de tipos. En varios casos, uno puede interactuar con SQLAlchemy directamente, como por ejemplo, en Relations se puede usar sa_relationship_kwargs : class Wand ( SQLModel , table = True ): # type: ignore # noqa id : Optional [ int ] = Field ( primary_key = True , default = None ) wizard_id : int = Field ( foreign_key = \"wizard.id\" , default = None ) wizard : Wizard = Relationship ( sa_relationship_kwargs = dict ( lazy = \"joined\" )) wand = Wand () wand . wizard = wizard","title":"Modelos"},{"location":"contribute/orm/#modelos","text":"En ese proyecto se utiliza SQLModel para la definici\u00f3n de modelos (tablas) y las consultas de la base de datos. Es un wrapper de SQLAlchemy , un ORM popular de python. SQLModel combina la simplicidad de @dataclass con el poder de SQLAlchemy: SQLModel from datetime import datetime from typing import Optional from sqlmodel import SQLModel , Field , Relationship class Wizard ( SQLModel , table = True ): # type: ignore # noqa id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str level : int = 0 created_at : datetime = Field ( default_factory = datetime . now ) wizard = Wizard ( name = \"\ud83e\uddd9\u200d\" ) Data Classes from datetime import datetime from typing import Optional from dataclasses import dataclass , field @dataclass class Wizard : name : str # Fields without a default value must appear fist id : Optional [ int ] = None level : int = 0 created_at : datetime = field ( default_factory = datetime . now ) wizard = Wizard ( name = \"\ud83e\uddd9\u200d\u2642\ufe0f\" ) Importante SQLModel fue lanzada el 24 de Agosto del 2021, y todavia no alcanza una versi\u00f3n estable, por lo que la API puede cambiar drasticamente y hay m\u00e9todos que no tienen anotaci\u00f3n de tipos. En varios casos, uno puede interactuar con SQLAlchemy directamente, como por ejemplo, en Relations se puede usar sa_relationship_kwargs : class Wand ( SQLModel , table = True ): # type: ignore # noqa id : Optional [ int ] = Field ( primary_key = True , default = None ) wizard_id : int = Field ( foreign_key = \"wizard.id\" , default = None ) wizard : Wizard = Relationship ( sa_relationship_kwargs = dict ( lazy = \"joined\" )) wand = Wand () wand . wizard = wizard","title":"Modelos"},{"location":"contribute/rest_api/","text":"Rest API Para la API se utiliza FastAPI , un framework web que permite crear una APIs auto documentadas 1 y documentadas automaticamente 2 . La estructura es similar a otros frameworks web como Express: FastAPI from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def say_hello ( name : str = \"World\" ) -> str : return f \"Hello { name } \" # uvicorn module:app --port 8080 Express const express = require ( 'express' ); const app = express (); app . get ( '/' , function ( req , res ){ res . send ( `Hello ${ req . params . name || 'World' } !` ) }); // app.listen(8080); Referencia R\u00e1pida Auto documentaci\u00f3n Cada endpoint es documentado automaticamente en el formato OpenAPI . Se puede ver la documentaci\u00f3n y probar cada endpoint tanto en la interfaz de Swagger UI en /docs y en la interfaz de ReDoc en /redoc , en el servidor. El nombre del endpoint es obtenido del nombre del nombre de la funci\u00f3n, su descripci\u00f3n de su docstring, los par\u00e1metros de los atributos con las anotaciones de tipos, la categoria con el par\u00e1metro, el formato de respuesta y su status code con los par\u00e1metro tags , response_model y status_code respectivamente. Dependencias Las dependencias en FastAPI son procesos que ocurren ocurren generalmente antes del proceso principal de la ruta. Estos pueden ser usados para evitar repetir codigo en cada ruta. Un caso com\u00fan es con sesiones en la base de datos: def get_db (): db = Session ( engine ) try : yield db finally : db . commit () db . close () @app . get ( \"/users/:user_id\" ) def user_by_id ( user_id : int , db : Session = Depends ( get_db )): return db . exec ( select ( User ) . where ( User . id == user_id )) . one () Que el c\u00f3digo se entiende por si solo \u21a9 Que el c\u00f3digo genera documentaci\u00f3n automaticamente \u21a9","title":"Rest API"},{"location":"contribute/rest_api/#rest-api","text":"Para la API se utiliza FastAPI , un framework web que permite crear una APIs auto documentadas 1 y documentadas automaticamente 2 . La estructura es similar a otros frameworks web como Express: FastAPI from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def say_hello ( name : str = \"World\" ) -> str : return f \"Hello { name } \" # uvicorn module:app --port 8080 Express const express = require ( 'express' ); const app = express (); app . get ( '/' , function ( req , res ){ res . send ( `Hello ${ req . params . name || 'World' } !` ) }); // app.listen(8080);","title":"Rest API"},{"location":"contribute/rest_api/#referencia-rapida","text":"","title":"Referencia R\u00e1pida"},{"location":"contribute/rest_api/#auto-documentacion","text":"Cada endpoint es documentado automaticamente en el formato OpenAPI . Se puede ver la documentaci\u00f3n y probar cada endpoint tanto en la interfaz de Swagger UI en /docs y en la interfaz de ReDoc en /redoc , en el servidor. El nombre del endpoint es obtenido del nombre del nombre de la funci\u00f3n, su descripci\u00f3n de su docstring, los par\u00e1metros de los atributos con las anotaciones de tipos, la categoria con el par\u00e1metro, el formato de respuesta y su status code con los par\u00e1metro tags , response_model y status_code respectivamente.","title":"Auto documentaci\u00f3n"},{"location":"contribute/rest_api/#dependencias","text":"Las dependencias en FastAPI son procesos que ocurren ocurren generalmente antes del proceso principal de la ruta. Estos pueden ser usados para evitar repetir codigo en cada ruta. Un caso com\u00fan es con sesiones en la base de datos: def get_db (): db = Session ( engine ) try : yield db finally : db . commit () db . close () @app . get ( \"/users/:user_id\" ) def user_by_id ( user_id : int , db : Session = Depends ( get_db )): return db . exec ( select ( User ) . where ( User . id == user_id )) . one () Que el c\u00f3digo se entiende por si solo \u21a9 Que el c\u00f3digo genera documentaci\u00f3n automaticamente \u21a9","title":"Dependencias"},{"location":"models/","text":"Modelos Los modelos son las instancias creadas en la base de datos que son expuestas en la API . Nota Esta documentaci\u00f3n est\u00e1 en progreso! Adem\u00e1s, si crees que se podria a\u00f1adir un nuevo modelo puedes sugerirlo en el foro .","title":"Modelos"},{"location":"models/#modelos","text":"Los modelos son las instancias creadas en la base de datos que son expuestas en la API . Nota Esta documentaci\u00f3n est\u00e1 en progreso! Adem\u00e1s, si crees que se podria a\u00f1adir un nuevo modelo puedes sugerirlo en el foro .","title":"Modelos"},{"location":"sources/","text":"Fuentes de datos De donde sacamos la informaci\u00f3n que recolectamos!","title":"Fuentes de datos"},{"location":"sources/#fuentes-de-datos","text":"De donde sacamos la informaci\u00f3n que recolectamos!","title":"Fuentes de datos"},{"location":"sources/almapp/","text":"Alma M\u00e1ter App Datos de ubicaciones que recolecto la aplicaci\u00f3n de mapas de Alma M\u00e1ter App de Patricio Lopez . Seeds de Alma M\u00e1ter App","title":"Alma M\u00e1ter App"},{"location":"sources/almapp/#alma-mater-app","text":"Datos de ubicaciones que recolecto la aplicaci\u00f3n de mapas de Alma M\u00e1ter App de Patricio Lopez . Seeds de Alma M\u00e1ter App","title":"Alma M\u00e1ter App"},{"location":"sources/buscacursos/","text":"Busca Cursos Busca Cursos entrega informaci\u00f3n para cada curso, y adicionalmente informaci\u00f3n de cada ramo. Portal de Busca Cursos Calendario de pruebas en HTML y ICS (requiere cookies). Vacantes reservadas con URLs del siguiente formato: buscacursos.uc.cl/informacionVacReserva.ajax.php?nrc=#{nrc}&termcode=#{a\u00f1o}-#{semestre}","title":"Busca Cursos"},{"location":"sources/buscacursos/#busca-cursos","text":"Busca Cursos entrega informaci\u00f3n para cada curso, y adicionalmente informaci\u00f3n de cada ramo. Portal de Busca Cursos Calendario de pruebas en HTML y ICS (requiere cookies). Vacantes reservadas con URLs del siguiente formato: buscacursos.uc.cl/informacionVacReserva.ajax.php?nrc=#{nrc}&termcode=#{a\u00f1o}-#{semestre}","title":"Busca Cursos"},{"location":"sources/calendario_academico/","text":"Calendario Academico Entrega informaci\u00f3n de los eventos que realiza la universidad y sobre los periodos acad\u00e9micos. Se pueden encontrar publicamente en la URL con el siguiente formato: admisionyregistros.uc.cl/images/pdf/calendarioUC/calendario_academico_20XX.pdf O tambi\u00e9n en cada a\u00f1o en el PortalUC > Inicio > Intranet > Calendario.","title":"Calendario Academico"},{"location":"sources/calendario_academico/#calendario-academico","text":"Entrega informaci\u00f3n de los eventos que realiza la universidad y sobre los periodos acad\u00e9micos. Se pueden encontrar publicamente en la URL con el siguiente formato: admisionyregistros.uc.cl/images/pdf/calendarioUC/calendario_academico_20XX.pdf O tambi\u00e9n en cada a\u00f1o en el PortalUC > Inicio > Intranet > Calendario.","title":"Calendario Academico"},{"location":"sources/catalogo/","text":"Cat\u00e1logo Entrega informaci\u00f3n para los ramos. Catalogo de Cursos","title":"Cat\u00e1logo"},{"location":"sources/catalogo/#catalogo","text":"Entrega informaci\u00f3n para los ramos. Catalogo de Cursos","title":"Cat\u00e1logo"},{"location":"sources/uc/","text":"P\u00e1gina UC.cl Tiene informaci\u00f3n sobre profesores, facultades, escuelas e institutos. Profesores Facultades, escuelas e institutos","title":"P\u00e1gina UC.cl"},{"location":"sources/uc/#pagina-uccl","text":"Tiene informaci\u00f3n sobre profesores, facultades, escuelas e institutos. Profesores Facultades, escuelas e institutos","title":"P\u00e1gina UC.cl"}]}